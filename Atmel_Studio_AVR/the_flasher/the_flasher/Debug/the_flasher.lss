
the_flasher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00000f9e  00001032  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a9  00800218  00800218  0000114a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000114a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8e  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096e  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b7  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000663  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000040c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_4>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_24>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <main+0x56>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	12 e0       	ldi	r17, 0x02	; 2
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ee e9       	ldi	r30, 0x9E	; 158
  9a:	ff e0       	ldi	r31, 0x0F	; 15
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a8 31       	cpi	r26, 0x18	; 24
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a8 e1       	ldi	r26, 0x18	; 24
  ac:	b2 e0       	ldi	r27, 0x02	; 2
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a1 3c       	cpi	r26, 0xC1	; 193
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 be 04 	call	0x97c	; 0x97c <main>
  bc:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <I2C_init>:
	TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWEN);
}

void I2C_stop(void){
	// clear acknowledge and enable bits
	TWCR &= ~( (1<<TWEA) | (1<<TWEN) );
  c4:	88 0f       	add	r24, r24
  c6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  ca:	85 ec       	ldi	r24, 0xC5	; 197
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d0:	08 95       	ret

000000d2 <__vector_24>:
}

ISR(TWI_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	
	// temporary stores the received data
	uint8_t data;
	
	// own address has been acknowledged
	if( (TWSR & 0xF8) == TW_SR_SLA_ACK ){  
  e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	80 36       	cpi	r24, 0x60	; 96
  ec:	49 f4       	brne	.+18     	; 0x100 <__vector_24+0x2e>
		buffer_address = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <buffer_address>
		// clear TWI interrupt flag, prepare to receive next byte and acknowledge
		TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
  f4:	ec eb       	ldi	r30, 0xBC	; 188
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	85 6c       	ori	r24, 0xC5	; 197
  fc:	80 83       	st	Z, r24
  fe:	63 c0       	rjmp	.+198    	; 0x1c6 <__vector_24+0xf4>
	}
	else if( (TWSR & 0xF8) == TW_SR_DATA_ACK ){ // data has been received in slave receiver mode
 100:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 104:	88 7f       	andi	r24, 0xF8	; 248
 106:	80 38       	cpi	r24, 0x80	; 128
 108:	61 f5       	brne	.+88     	; 0x162 <__vector_24+0x90>
		
		// save the received byte inside data 
		data = TWDR;
 10a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		
		// check wether an address has already been transmitted or not
		if(buffer_address == 0xFF){
 10e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	41 f4       	brne	.+16     	; 0x126 <__vector_24+0x54>
			
			buffer_address = data; 
 116:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <buffer_address>
			
			// clear TWI interrupt flag, prepare to receive next byte and acknowledge
			TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	85 6c       	ori	r24, 0xC5	; 197
 122:	80 83       	st	Z, r24
 124:	50 c0       	rjmp	.+160    	; 0x1c6 <__vector_24+0xf4>
		}
		else{ // if a databyte has already been received
			
			// store the data at the current address
			rxbuffer[buffer_address] = data;
 126:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <buffer_address>
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e7 5e       	subi	r30, 0xE7	; 231
 12e:	fc 4f       	sbci	r31, 0xFC	; 252
 130:	90 83       	st	Z, r25
			
			// increment the buffer address
			buffer_address++;
 132:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <buffer_address>
			
			// if there is still enough space inside the buffer
			if(buffer_address < 0xFF){
 13c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 140:	8f 3f       	cpi	r24, 0xFF	; 255
 142:	31 f0       	breq	.+12     	; 0x150 <__vector_24+0x7e>
				// clear TWI interrupt flag, prepare to receive next byte and acknowledge
				TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 144:	ec eb       	ldi	r30, 0xBC	; 188
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	85 6c       	ori	r24, 0xC5	; 197
 14c:	80 83       	st	Z, r24
 14e:	3b c0       	rjmp	.+118    	; 0x1c6 <__vector_24+0xf4>
			}
			else{
				// Don't acknowledge
				TWCR &= ~(1<<TWEA); 
 150:	ec eb       	ldi	r30, 0xBC	; 188
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	8f 7b       	andi	r24, 0xBF	; 191
 158:	80 83       	st	Z, r24
				// clear TWI interrupt flag, prepare to receive last byte.
				TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEN); 
 15a:	80 81       	ld	r24, Z
 15c:	85 68       	ori	r24, 0x85	; 133
 15e:	80 83       	st	Z, r24
 160:	32 c0       	rjmp	.+100    	; 0x1c6 <__vector_24+0xf4>
			}
		}
	}
	else if( (TWSR & 0xF8) == TW_ST_DATA_ACK ){ // device has been addressed to be a transmitter
 162:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 166:	88 7f       	andi	r24, 0xF8	; 248
 168:	88 3b       	cpi	r24, 0xB8	; 184
 16a:	41 f5       	brne	.+80     	; 0x1bc <__vector_24+0xea>
		
		// copy data from TWDR to the temporary memory
		data = TWDR;
 16c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		
		// if no buffer read address has been sent yet
		if( buffer_address == 0xFF ){
 170:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 174:	8f 3f       	cpi	r24, 0xFF	; 255
 176:	11 f4       	brne	.+4      	; 0x17c <__vector_24+0xaa>
			buffer_address = data;
 178:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <buffer_address>
		}
		
		// copy the specified buffer address into the TWDR register for transmission
		TWDR = txbuffer[buffer_address];
 17c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <buffer_address>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e6 5e       	subi	r30, 0xE6	; 230
 184:	fd 4f       	sbci	r31, 0xFD	; 253
 186:	80 81       	ld	r24, Z
 188:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		// increment buffer read address
		buffer_address++;
 18c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <buffer_address>
		
		// if there is another buffer address that can be sent
		if(buffer_address < 0xFF){
 196:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <buffer_address>
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	31 f0       	breq	.+12     	; 0x1aa <__vector_24+0xd8>
			// clear TWI interrupt flag, prepare to send next byte and receive acknowledge
			TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN); 
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	85 6c       	ori	r24, 0xC5	; 197
 1a6:	80 83       	st	Z, r24
 1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <__vector_24+0xf4>
		}
		else{
			// Don't acknowledge
			TWCR &= ~(1<<TWEA); 
 1aa:	ec eb       	ldi	r30, 0xBC	; 188
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 7b       	andi	r24, 0xBF	; 191
 1b2:	80 83       	st	Z, r24
			// clear TWI interrupt flag, prepare to receive last byte.
			TWCR |= (1<<TWIE) | (1<<TWINT) | (1<<TWEN); 
 1b4:	80 81       	ld	r24, Z
 1b6:	85 68       	ori	r24, 0x85	; 133
 1b8:	80 83       	st	Z, r24
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__vector_24+0xf4>
		}
		
	}
	else{
		// if none of the above apply prepare TWI to be addressed again
		TWCR |= (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
 1bc:	ec eb       	ldi	r30, 0xBC	; 188
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	85 64       	ori	r24, 0x45	; 69
 1c4:	80 83       	st	Z, r24
	} 
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <hsi2rgb>:
    //TCCR2B = XXXX X001
    TCCR2A |= (_BV(WGM01) | _BV(WGM00)); //11
    //TCCR2A &= ~(_BV(COM2A1) | _BV(COM2A0)); //00
    TCCR2A = (_BV(COM2B1) | (TCCR2A & ~(_BV(COM2B0)))); //10
    TCCR2B = ((TCCR2B & ~(_BV(CS02) | _BV(CS01))) | _BV(CS00)); //001
    TCNT2 = 0;
 1d8:	4f 92       	push	r4
 1da:	5f 92       	push	r5
 1dc:	6f 92       	push	r6
 1de:	7f 92       	push	r7
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2a 97       	sbiw	r28, 0x0a	; 10
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	49 01       	movw	r8, r18
 20a:	5a 01       	movw	r10, r20
 20c:	27 01       	movw	r4, r14
 20e:	38 01       	movw	r6, r16
 210:	da 86       	std	Y+10, r13	; 0x0a
 212:	c9 86       	std	Y+9, r12	; 0x09
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	44 eb       	ldi	r20, 0xB4	; 180
 21a:	53 e4       	ldi	r21, 0x43	; 67
 21c:	0e 94 15 06 	call	0xc2a	; 0xc2a <fmod>
 220:	20 ed       	ldi	r18, 0xD0	; 208
 222:	3f e0       	ldi	r19, 0x0F	; 15
 224:	49 e4       	ldi	r20, 0x49	; 73
 226:	50 e4       	ldi	r21, 0x40	; 64
 228:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	44 e3       	ldi	r20, 0x34	; 52
 232:	53 e4       	ldi	r21, 0x43	; 67
 234:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 238:	6b 01       	movw	r12, r22
 23a:	7c 01       	movw	r14, r24
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	a9 01       	movw	r20, r18
 242:	c5 01       	movw	r24, r10
 244:	b4 01       	movw	r22, r8
 246:	0e 94 20 07 	call	0xe40	; 0xe40 <__gesf2>
 24a:	18 16       	cp	r1, r24
 24c:	5c f4       	brge	.+22     	; 0x264 <hsi2rgb+0x8c>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e8       	ldi	r20, 0x80	; 128
 254:	5f e3       	ldi	r21, 0x3F	; 63
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 25e:	88 23       	and	r24, r24
 260:	2c f4       	brge	.+10     	; 0x26c <hsi2rgb+0x94>
 262:	0c c0       	rjmp	.+24     	; 0x27c <hsi2rgb+0xa4>
 264:	81 2c       	mov	r8, r1
 266:	91 2c       	mov	r9, r1
 268:	54 01       	movw	r10, r8
 26a:	08 c0       	rjmp	.+16     	; 0x27c <hsi2rgb+0xa4>
 26c:	0f 2e       	mov	r0, r31
 26e:	81 2c       	mov	r8, r1
 270:	91 2c       	mov	r9, r1
 272:	f0 e8       	ldi	r31, 0x80	; 128
 274:	af 2e       	mov	r10, r31
 276:	ff e3       	ldi	r31, 0x3F	; 63
 278:	bf 2e       	mov	r11, r31
 27a:	f0 2d       	mov	r31, r0
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	a9 01       	movw	r20, r18
 282:	c3 01       	movw	r24, r6
 284:	b2 01       	movw	r22, r4
 286:	0e 94 20 07 	call	0xe40	; 0xe40 <__gesf2>
 28a:	18 16       	cp	r1, r24
 28c:	5c f4       	brge	.+22     	; 0x2a4 <hsi2rgb+0xcc>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	5f e3       	ldi	r21, 0x3F	; 63
 296:	c3 01       	movw	r24, r6
 298:	b2 01       	movw	r22, r4
 29a:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 29e:	88 23       	and	r24, r24
 2a0:	2c f4       	brge	.+10     	; 0x2ac <hsi2rgb+0xd4>
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <hsi2rgb+0xe4>
 2a4:	41 2c       	mov	r4, r1
 2a6:	51 2c       	mov	r5, r1
 2a8:	32 01       	movw	r6, r4
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <hsi2rgb+0xe4>
 2ac:	0f 2e       	mov	r0, r31
 2ae:	41 2c       	mov	r4, r1
 2b0:	51 2c       	mov	r5, r1
 2b2:	f0 e8       	ldi	r31, 0x80	; 128
 2b4:	6f 2e       	mov	r6, r31
 2b6:	ff e3       	ldi	r31, 0x3F	; 63
 2b8:	7f 2e       	mov	r7, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	2c e7       	ldi	r18, 0x7C	; 124
 2be:	3a e0       	ldi	r19, 0x0A	; 10
 2c0:	46 e0       	ldi	r20, 0x06	; 6
 2c2:	50 e4       	ldi	r21, 0x40	; 64
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 2cc:	88 23       	and	r24, r24
 2ce:	0c f0       	brlt	.+2      	; 0x2d2 <hsi2rgb+0xfa>
 2d0:	6e c0       	rjmp	.+220    	; 0x3ae <hsi2rgb+0x1d6>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	4f e7       	ldi	r20, 0x7F	; 127
 2d8:	53 e4       	ldi	r21, 0x43	; 67
 2da:	c3 01       	movw	r24, r6
 2dc:	b2 01       	movw	r22, r4
 2de:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e4       	ldi	r20, 0x40	; 64
 2e8:	50 e4       	ldi	r21, 0x40	; 64
 2ea:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 2ee:	2b 01       	movw	r4, r22
 2f0:	3c 01       	movw	r6, r24
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 2fa:	69 83       	std	Y+1, r22	; 0x01
 2fc:	7a 83       	std	Y+2, r23	; 0x02
 2fe:	8b 83       	std	Y+3, r24	; 0x03
 300:	9c 83       	std	Y+4, r25	; 0x04
 302:	a7 01       	movw	r20, r14
 304:	96 01       	movw	r18, r12
 306:	6a e8       	ldi	r22, 0x8A	; 138
 308:	7a e0       	ldi	r23, 0x0A	; 10
 30a:	86 e8       	ldi	r24, 0x86	; 134
 30c:	9f e3       	ldi	r25, 0x3F	; 63
 30e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 312:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 316:	6b 01       	movw	r12, r22
 318:	7c 01       	movw	r14, r24
 31a:	29 81       	ldd	r18, Y+1	; 0x01
 31c:	3a 81       	ldd	r19, Y+2	; 0x02
 31e:	4b 81       	ldd	r20, Y+3	; 0x03
 320:	5c 81       	ldd	r21, Y+4	; 0x04
 322:	c5 01       	movw	r24, r10
 324:	b4 01       	movw	r22, r8
 326:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 32a:	a7 01       	movw	r20, r14
 32c:	96 01       	movw	r18, r12
 32e:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e8       	ldi	r20, 0x80	; 128
 338:	5f e3       	ldi	r21, 0x3F	; 63
 33a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 33e:	a3 01       	movw	r20, r6
 340:	92 01       	movw	r18, r4
 342:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 346:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 34a:	8b 01       	movw	r16, r22
 34c:	a7 01       	movw	r20, r14
 34e:	96 01       	movw	r18, r12
 350:	69 81       	ldd	r22, Y+1	; 0x01
 352:	7a 81       	ldd	r23, Y+2	; 0x02
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	9c 81       	ldd	r25, Y+4	; 0x04
 358:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 35c:	9b 01       	movw	r18, r22
 35e:	ac 01       	movw	r20, r24
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	80 e8       	ldi	r24, 0x80	; 128
 366:	9f e3       	ldi	r25, 0x3F	; 63
 368:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 36c:	a5 01       	movw	r20, r10
 36e:	94 01       	movw	r18, r8
 370:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e8       	ldi	r20, 0x80	; 128
 37a:	5f e3       	ldi	r21, 0x3F	; 63
 37c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 380:	a3 01       	movw	r20, r6
 382:	92 01       	movw	r18, r4
 384:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 388:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 38c:	7b 01       	movw	r14, r22
 38e:	a5 01       	movw	r20, r10
 390:	94 01       	movw	r18, r8
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	9f e3       	ldi	r25, 0x3F	; 63
 39a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 39e:	a3 01       	movw	r20, r6
 3a0:	92 01       	movw	r18, r4
 3a2:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 3a6:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 3aa:	6b 01       	movw	r12, r22
 3ac:	06 c1       	rjmp	.+524    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 3ae:	2b e8       	ldi	r18, 0x8B	; 139
 3b0:	3a e0       	ldi	r19, 0x0A	; 10
 3b2:	46 e8       	ldi	r20, 0x86	; 134
 3b4:	50 e4       	ldi	r21, 0x40	; 64
 3b6:	c7 01       	movw	r24, r14
 3b8:	b6 01       	movw	r22, r12
 3ba:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 3be:	88 23       	and	r24, r24
 3c0:	0c f0       	brlt	.+2      	; 0x3c4 <hsi2rgb+0x1ec>
 3c2:	7e c0       	rjmp	.+252    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 3c4:	2c e7       	ldi	r18, 0x7C	; 124
 3c6:	3a e0       	ldi	r19, 0x0A	; 10
 3c8:	46 e0       	ldi	r20, 0x06	; 6
 3ca:	50 e4       	ldi	r21, 0x40	; 64
 3cc:	c7 01       	movw	r24, r14
 3ce:	b6 01       	movw	r22, r12
 3d0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 3d4:	6b 01       	movw	r12, r22
 3d6:	7c 01       	movw	r14, r24
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	4f e7       	ldi	r20, 0x7F	; 127
 3de:	53 e4       	ldi	r21, 0x43	; 67
 3e0:	c3 01       	movw	r24, r6
 3e2:	b2 01       	movw	r22, r4
 3e4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e4       	ldi	r20, 0x40	; 64
 3ee:	50 e4       	ldi	r21, 0x40	; 64
 3f0:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 3f4:	2b 01       	movw	r4, r22
 3f6:	3c 01       	movw	r6, r24
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 400:	69 83       	std	Y+1, r22	; 0x01
 402:	7a 83       	std	Y+2, r23	; 0x02
 404:	8b 83       	std	Y+3, r24	; 0x03
 406:	9c 83       	std	Y+4, r25	; 0x04
 408:	a7 01       	movw	r20, r14
 40a:	96 01       	movw	r18, r12
 40c:	6a e8       	ldi	r22, 0x8A	; 138
 40e:	7a e0       	ldi	r23, 0x0A	; 10
 410:	86 e8       	ldi	r24, 0x86	; 134
 412:	9f e3       	ldi	r25, 0x3F	; 63
 414:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 418:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 41c:	6d 83       	std	Y+5, r22	; 0x05
 41e:	7e 83       	std	Y+6, r23	; 0x06
 420:	8f 83       	std	Y+7, r24	; 0x07
 422:	98 87       	std	Y+8, r25	; 0x08
 424:	29 81       	ldd	r18, Y+1	; 0x01
 426:	3a 81       	ldd	r19, Y+2	; 0x02
 428:	4b 81       	ldd	r20, Y+3	; 0x03
 42a:	5c 81       	ldd	r21, Y+4	; 0x04
 42c:	c5 01       	movw	r24, r10
 42e:	b4 01       	movw	r22, r8
 430:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 434:	2d 81       	ldd	r18, Y+5	; 0x05
 436:	3e 81       	ldd	r19, Y+6	; 0x06
 438:	4f 81       	ldd	r20, Y+7	; 0x07
 43a:	58 85       	ldd	r21, Y+8	; 0x08
 43c:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	40 e8       	ldi	r20, 0x80	; 128
 446:	5f e3       	ldi	r21, 0x3F	; 63
 448:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 44c:	a3 01       	movw	r20, r6
 44e:	92 01       	movw	r18, r4
 450:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 454:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 458:	7b 01       	movw	r14, r22
 45a:	2d 81       	ldd	r18, Y+5	; 0x05
 45c:	3e 81       	ldd	r19, Y+6	; 0x06
 45e:	4f 81       	ldd	r20, Y+7	; 0x07
 460:	58 85       	ldd	r21, Y+8	; 0x08
 462:	69 81       	ldd	r22, Y+1	; 0x01
 464:	7a 81       	ldd	r23, Y+2	; 0x02
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	9c 81       	ldd	r25, Y+4	; 0x04
 46a:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	9f e3       	ldi	r25, 0x3F	; 63
 47a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 47e:	a5 01       	movw	r20, r10
 480:	94 01       	movw	r18, r8
 482:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	5f e3       	ldi	r21, 0x3F	; 63
 48e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 492:	a3 01       	movw	r20, r6
 494:	92 01       	movw	r18, r4
 496:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 49a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 49e:	6b 01       	movw	r12, r22
 4a0:	a5 01       	movw	r20, r10
 4a2:	94 01       	movw	r18, r8
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	9f e3       	ldi	r25, 0x3F	; 63
 4ac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 4b0:	a3 01       	movw	r20, r6
 4b2:	92 01       	movw	r18, r4
 4b4:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 4b8:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 4bc:	8b 01       	movw	r16, r22
 4be:	7d c0       	rjmp	.+250    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 4c0:	2b e8       	ldi	r18, 0x8B	; 139
 4c2:	3a e0       	ldi	r19, 0x0A	; 10
 4c4:	46 e8       	ldi	r20, 0x86	; 134
 4c6:	50 e4       	ldi	r21, 0x40	; 64
 4c8:	c7 01       	movw	r24, r14
 4ca:	b6 01       	movw	r22, r12
 4cc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 4d0:	6b 01       	movw	r12, r22
 4d2:	7c 01       	movw	r14, r24
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	4f e7       	ldi	r20, 0x7F	; 127
 4da:	53 e4       	ldi	r21, 0x43	; 67
 4dc:	c3 01       	movw	r24, r6
 4de:	b2 01       	movw	r22, r4
 4e0:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	40 e4       	ldi	r20, 0x40	; 64
 4ea:	50 e4       	ldi	r21, 0x40	; 64
 4ec:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 4f0:	2b 01       	movw	r4, r22
 4f2:	3c 01       	movw	r6, r24
 4f4:	c7 01       	movw	r24, r14
 4f6:	b6 01       	movw	r22, r12
 4f8:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 4fc:	69 83       	std	Y+1, r22	; 0x01
 4fe:	7a 83       	std	Y+2, r23	; 0x02
 500:	8b 83       	std	Y+3, r24	; 0x03
 502:	9c 83       	std	Y+4, r25	; 0x04
 504:	a7 01       	movw	r20, r14
 506:	96 01       	movw	r18, r12
 508:	6a e8       	ldi	r22, 0x8A	; 138
 50a:	7a e0       	ldi	r23, 0x0A	; 10
 50c:	86 e8       	ldi	r24, 0x86	; 134
 50e:	9f e3       	ldi	r25, 0x3F	; 63
 510:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 514:	0e 94 5d 05 	call	0xaba	; 0xaba <cos>
 518:	6d 83       	std	Y+5, r22	; 0x05
 51a:	7e 83       	std	Y+6, r23	; 0x06
 51c:	8f 83       	std	Y+7, r24	; 0x07
 51e:	98 87       	std	Y+8, r25	; 0x08
 520:	29 81       	ldd	r18, Y+1	; 0x01
 522:	3a 81       	ldd	r19, Y+2	; 0x02
 524:	4b 81       	ldd	r20, Y+3	; 0x03
 526:	5c 81       	ldd	r21, Y+4	; 0x04
 528:	c5 01       	movw	r24, r10
 52a:	b4 01       	movw	r22, r8
 52c:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 530:	2d 81       	ldd	r18, Y+5	; 0x05
 532:	3e 81       	ldd	r19, Y+6	; 0x06
 534:	4f 81       	ldd	r20, Y+7	; 0x07
 536:	58 85       	ldd	r21, Y+8	; 0x08
 538:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e8       	ldi	r20, 0x80	; 128
 542:	5f e3       	ldi	r21, 0x3F	; 63
 544:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 548:	a3 01       	movw	r20, r6
 54a:	92 01       	movw	r18, r4
 54c:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 550:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 554:	6b 01       	movw	r12, r22
 556:	2d 81       	ldd	r18, Y+5	; 0x05
 558:	3e 81       	ldd	r19, Y+6	; 0x06
 55a:	4f 81       	ldd	r20, Y+7	; 0x07
 55c:	58 85       	ldd	r21, Y+8	; 0x08
 55e:	69 81       	ldd	r22, Y+1	; 0x01
 560:	7a 81       	ldd	r23, Y+2	; 0x02
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	9c 81       	ldd	r25, Y+4	; 0x04
 566:	0e 94 62 05 	call	0xac4	; 0xac4 <__divsf3>
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	80 e8       	ldi	r24, 0x80	; 128
 574:	9f e3       	ldi	r25, 0x3F	; 63
 576:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 57a:	a5 01       	movw	r20, r10
 57c:	94 01       	movw	r18, r8
 57e:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	40 e8       	ldi	r20, 0x80	; 128
 588:	5f e3       	ldi	r21, 0x3F	; 63
 58a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 58e:	a3 01       	movw	r20, r6
 590:	92 01       	movw	r18, r4
 592:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 596:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 59a:	8b 01       	movw	r16, r22
 59c:	a5 01       	movw	r20, r10
 59e:	94 01       	movw	r18, r8
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	9f e3       	ldi	r25, 0x3F	; 63
 5a8:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__subsf3>
 5ac:	a3 01       	movw	r20, r6
 5ae:	92 01       	movw	r18, r4
 5b0:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 5b4:	0e 94 d4 05 	call	0xba8	; 0xba8 <__fixsfsi>
 5b8:	7b 01       	movw	r14, r22
 5ba:	e9 85       	ldd	r30, Y+9	; 0x09
 5bc:	fa 85       	ldd	r31, Y+10	; 0x0a
 5be:	11 83       	std	Z+1, r17	; 0x01
 5c0:	00 83       	st	Z, r16
 5c2:	f3 82       	std	Z+3, r15	; 0x03
 5c4:	e2 82       	std	Z+2, r14	; 0x02
 5c6:	d5 82       	std	Z+5, r13	; 0x05
 5c8:	c4 82       	std	Z+4, r12	; 0x04
 5ca:	2a 96       	adiw	r28, 0x0a	; 10
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	df 90       	pop	r13
 5e4:	cf 90       	pop	r12
 5e6:	bf 90       	pop	r11
 5e8:	af 90       	pop	r10
 5ea:	9f 90       	pop	r9
 5ec:	8f 90       	pop	r8
 5ee:	7f 90       	pop	r7
 5f0:	6f 90       	pop	r6
 5f2:	5f 90       	pop	r5
 5f4:	4f 90       	pop	r4
 5f6:	08 95       	ret

000005f8 <loop_colors>:
 5f8:	af 92       	push	r10
 5fa:	bf 92       	push	r11
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <H>
 610:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <H+0x1>
 614:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <H+0x2>
 618:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <H+0x3>
 61c:	c8 e1       	ldi	r28, 0x18	; 24
 61e:	d4 e0       	ldi	r29, 0x04	; 4
 620:	0f 2e       	mov	r0, r31
 622:	f4 eb       	ldi	r31, 0xB4	; 180
 624:	af 2e       	mov	r10, r31
 626:	b1 2c       	mov	r11, r1
 628:	f0 2d       	mov	r31, r0
 62a:	88 81       	ld	r24, Y
 62c:	87 bd       	out	0x27, r24	; 39
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	88 bd       	out	0x28, r24	; 40
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	f5 01       	movw	r30, r10
 636:	80 83       	st	Z, r24
 638:	e0 90 26 04 	lds	r14, 0x0426	; 0x800426 <I>
 63c:	f0 90 27 04 	lds	r15, 0x0427	; 0x800427 <I+0x1>
 640:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <I+0x2>
 644:	10 91 29 04 	lds	r17, 0x0429	; 0x800429 <I+0x3>
 648:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <S>
 64c:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <S+0x1>
 650:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <S+0x2>
 654:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <S+0x3>
 658:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <H>
 65c:	70 91 23 04 	lds	r23, 0x0423	; 0x800423 <H+0x1>
 660:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <H+0x2>
 664:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <H+0x3>
 668:	6e 01       	movw	r12, r28
 66a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <hsi2rgb>
 66e:	89 ef       	ldi	r24, 0xF9	; 249
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <loop_colors+0x7a>
 676:	00 c0       	rjmp	.+0      	; 0x678 <loop_colors+0x80>
 678:	00 00       	nop
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 e8       	ldi	r20, 0x80	; 128
 680:	5f e3       	ldi	r21, 0x3F	; 63
 682:	60 91 22 04 	lds	r22, 0x0422	; 0x800422 <H>
 686:	70 91 23 04 	lds	r23, 0x0423	; 0x800423 <H+0x1>
 68a:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <H+0x2>
 68e:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <H+0x3>
 692:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__addsf3>
 696:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <H>
 69a:	70 93 23 04 	sts	0x0423, r23	; 0x800423 <H+0x1>
 69e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <H+0x2>
 6a2:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <H+0x3>
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	44 eb       	ldi	r20, 0xB4	; 180
 6ac:	53 e4       	ldi	r21, 0x43	; 67
 6ae:	0e 94 58 05 	call	0xab0	; 0xab0 <__cmpsf2>
 6b2:	88 23       	and	r24, r24
 6b4:	0c f4       	brge	.+2      	; 0x6b8 <loop_colors+0xc0>
 6b6:	b9 cf       	rjmp	.-142    	; 0x62a <loop_colors+0x32>
 6b8:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <H>
 6bc:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <H+0x1>
 6c0:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <H+0x2>
 6c4:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <H+0x3>
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a0 e8       	ldi	r26, 0x80	; 128
 6ce:	bf e3       	ldi	r27, 0x3F	; 63
 6d0:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <S>
 6d4:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <S+0x1>
 6d8:	a0 93 20 04 	sts	0x0420, r26	; 0x800420 <S+0x2>
 6dc:	b0 93 21 04 	sts	0x0421, r27	; 0x800421 <S+0x3>
 6e0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <I>
 6e4:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <I+0x1>
 6e8:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <I+0x2>
 6ec:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <I+0x3>
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	ef 90       	pop	r14
 6fc:	df 90       	pop	r13
 6fe:	cf 90       	pop	r12
 700:	bf 90       	pop	r11
 702:	af 90       	pop	r10
 704:	08 95       	ret

00000706 <init_interrupts>:
}

void init_interrupts(void)
{
    PCICR |= _BV(PCIE1); //enable PCINT1 interrupt signal
 706:	e8 e6       	ldi	r30, 0x68	; 104
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	80 83       	st	Z, r24
    PCMSK1 |= (_BV(ENC1A_INT) | _BV(ENC1B_INT)); //enable interrupt for knob 1
 710:	ec e6       	ldi	r30, 0x6C	; 108
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	83 60       	ori	r24, 0x03	; 3
 718:	80 83       	st	Z, r24
    PCMSK1 |= (_BV(ENC2A_INT) | _BV(ENC2B_INT)); //enable interrupt for knob 2
 71a:	80 81       	ld	r24, Z
 71c:	8c 60       	ori	r24, 0x0C	; 12
 71e:	80 83       	st	Z, r24
    PCMSK1 |= (_BV(ENC3A_INT) | _BV(ENC3B_INT)); //enable interrupt for knob 3
 720:	80 81       	ld	r24, Z
 722:	80 63       	ori	r24, 0x30	; 48
 724:	80 83       	st	Z, r24
    sei(); //enable global interrupts
 726:	78 94       	sei
 728:	08 95       	ret

0000072a <__vector_4>:
}

//PCINT1 interrupt
ISR(PCINT1_vect)
{
 72a:	1f 92       	push	r1
 72c:	0f 92       	push	r0
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	0f 92       	push	r0
 732:	11 24       	eor	r1, r1
 734:	2f 93       	push	r18
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
    static uint8_t enc_pin_history = 0;
    uint8_t changed_pins;
    int8_t inc;
    
    //capture which bits have changed since last time
    changed_pins = ENCPINS ^ enc_pin_history; //^ means XOR
 73e:	96 b1       	in	r25, 0x06	; 6
 740:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
 744:	98 27       	eor	r25, r24
    enc_pin_history = ENCPINS;
 746:	86 b1       	in	r24, 0x06	; 6
 748:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
    
    if((changed_pins & _BV(ENC1A_PIN)) || (changed_pins & _BV(ENC1B_PIN)))
 74c:	89 2f       	mov	r24, r25
 74e:	83 70       	andi	r24, 0x03	; 3
 750:	59 f1       	breq	.+86     	; 0x7a8 <__vector_4+0x7e>
    //Change on Encoder 1 input
    {
        //shift old AB values left to make room for new reading
        old_AB_one <<= 2;
 752:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <old_AB_one.1976>
 756:	8e 2f       	mov	r24, r30
 758:	88 0f       	add	r24, r24
 75a:	88 0f       	add	r24, r24
 75c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <old_AB_one.1976>
        
        //NOTE: next line requires A and B inputs to be on consecutive pins
        old_AB_one |= (ENCPINS & 0x03); //store current AB state
 760:	e6 b1       	in	r30, 0x06	; 6
 762:	e3 70       	andi	r30, 0x03	; 3
 764:	e8 2b       	or	r30, r24
 766:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <old_AB_one.1976>
        
        //use combination of prev and curr AB as index to determine direction
        inc = enc_states[( old_AB_one & 0x0f )];
 76a:	ef 70       	andi	r30, 0x0F	; 15
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	e8 5f       	subi	r30, 0xF8	; 248
 770:	fe 4f       	sbci	r31, 0xFE	; 254
 772:	80 81       	ld	r24, Z
        
        //upper and lower bounds-checking to avoid wraparound/overflow
        if (enc_one_value > 250 && inc > 0) enc_one_value = 255;
 774:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <enc_one_value>
 778:	2b 3f       	cpi	r18, 0xFB	; 251
 77a:	30 f0       	brcs	.+12     	; 0x788 <__vector_4+0x5e>
 77c:	18 16       	cp	r1, r24
 77e:	24 f4       	brge	.+8      	; 0x788 <__vector_4+0x5e>
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <enc_one_value>
 786:	10 c0       	rjmp	.+32     	; 0x7a8 <__vector_4+0x7e>
        else if (enc_one_value < 5 && inc < 0) enc_one_value = 0;
 788:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <enc_one_value>
 78c:	25 30       	cpi	r18, 0x05	; 5
 78e:	28 f4       	brcc	.+10     	; 0x79a <__vector_4+0x70>
 790:	88 23       	and	r24, r24
 792:	1c f4       	brge	.+6      	; 0x79a <__vector_4+0x70>
 794:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <enc_one_value>
 798:	07 c0       	rjmp	.+14     	; 0x7a8 <__vector_4+0x7e>
        else enc_one_value += inc*4;
 79a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <enc_one_value>
 79e:	88 0f       	add	r24, r24
 7a0:	88 0f       	add	r24, r24
 7a2:	82 0f       	add	r24, r18
 7a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <enc_one_value>
    }
    
    if((changed_pins & _BV(ENC2A_PIN)) || (changed_pins & _BV(ENC2B_PIN)))
 7a8:	89 2f       	mov	r24, r25
 7aa:	8c 70       	andi	r24, 0x0C	; 12
 7ac:	69 f1       	breq	.+90     	; 0x808 <__vector_4+0xde>
    //Change on Encoder 2 input
    {
        old_AB_two <<= 2;
 7ae:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <old_AB_two.1977>
 7b2:	8e 2f       	mov	r24, r30
 7b4:	88 0f       	add	r24, r24
 7b6:	88 0f       	add	r24, r24
 7b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_AB_two.1977>
        old_AB_two |= ((ENCPINS>>2) & 0x03);
 7bc:	e6 b1       	in	r30, 0x06	; 6
 7be:	e6 95       	lsr	r30
 7c0:	e6 95       	lsr	r30
 7c2:	e3 70       	andi	r30, 0x03	; 3
 7c4:	e8 2b       	or	r30, r24
 7c6:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <old_AB_two.1977>
        inc = enc_states[( old_AB_two & 0x0f )];
 7ca:	ef 70       	andi	r30, 0x0F	; 15
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	e8 5f       	subi	r30, 0xF8	; 248
 7d0:	fe 4f       	sbci	r31, 0xFE	; 254
 7d2:	80 81       	ld	r24, Z
        
        if (enc_two_value > 250 && inc > 0) enc_two_value = 255;
 7d4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <enc_two_value>
 7d8:	2b 3f       	cpi	r18, 0xFB	; 251
 7da:	30 f0       	brcs	.+12     	; 0x7e8 <__vector_4+0xbe>
 7dc:	18 16       	cp	r1, r24
 7de:	24 f4       	brge	.+8      	; 0x7e8 <__vector_4+0xbe>
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <enc_two_value>
 7e6:	10 c0       	rjmp	.+32     	; 0x808 <__vector_4+0xde>
        else if (enc_two_value < 5 && inc < 0) enc_two_value = 0;
 7e8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <enc_two_value>
 7ec:	25 30       	cpi	r18, 0x05	; 5
 7ee:	28 f4       	brcc	.+10     	; 0x7fa <__vector_4+0xd0>
 7f0:	88 23       	and	r24, r24
 7f2:	1c f4       	brge	.+6      	; 0x7fa <__vector_4+0xd0>
 7f4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <enc_two_value>
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <__vector_4+0xde>
        else enc_two_value += inc*4;
 7fa:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <enc_two_value>
 7fe:	88 0f       	add	r24, r24
 800:	88 0f       	add	r24, r24
 802:	82 0f       	add	r24, r18
 804:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <enc_two_value>
    }
    
    if((changed_pins & _BV(ENC3A_PIN)) || (changed_pins & _BV(ENC3B_PIN)))
 808:	90 73       	andi	r25, 0x30	; 48
 80a:	69 f1       	breq	.+90     	; 0x866 <__vector_4+0x13c>
    //Change on Encoder 3 input
    {
        old_AB_three <<= 2;
 80c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 810:	8e 2f       	mov	r24, r30
 812:	88 0f       	add	r24, r24
 814:	88 0f       	add	r24, r24
 816:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        old_AB_three |= ((ENCPINS>>4) & 0x03);
 81a:	e6 b1       	in	r30, 0x06	; 6
 81c:	e2 95       	swap	r30
 81e:	ef 70       	andi	r30, 0x0F	; 15
 820:	e3 70       	andi	r30, 0x03	; 3
 822:	e8 2b       	or	r30, r24
 824:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <__data_start>
        inc = enc_states[( old_AB_three & 0x0f )];
 828:	ef 70       	andi	r30, 0x0F	; 15
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	e8 5f       	subi	r30, 0xF8	; 248
 82e:	fe 4f       	sbci	r31, 0xFE	; 254
 830:	80 81       	ld	r24, Z
        
        if (enc_three_value > 250 && inc > 0) enc_three_value = 255;
 832:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <enc_three_value>
 836:	9b 3f       	cpi	r25, 0xFB	; 251
 838:	30 f0       	brcs	.+12     	; 0x846 <__vector_4+0x11c>
 83a:	18 16       	cp	r1, r24
 83c:	24 f4       	brge	.+8      	; 0x846 <__vector_4+0x11c>
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <enc_three_value>
 844:	10 c0       	rjmp	.+32     	; 0x866 <__vector_4+0x13c>
        else if (enc_three_value < 5 && inc < 0) enc_three_value = 0;
 846:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <enc_three_value>
 84a:	95 30       	cpi	r25, 0x05	; 5
 84c:	28 f4       	brcc	.+10     	; 0x858 <__vector_4+0x12e>
 84e:	88 23       	and	r24, r24
 850:	1c f4       	brge	.+6      	; 0x858 <__vector_4+0x12e>
 852:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <enc_three_value>
 856:	07 c0       	rjmp	.+14     	; 0x866 <__vector_4+0x13c>
        else enc_three_value += inc*4;
 858:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <enc_three_value>
 85c:	88 0f       	add	r24, r24
 85e:	88 0f       	add	r24, r24
 860:	89 0f       	add	r24, r25
 862:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <enc_three_value>
    }
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	2f 91       	pop	r18
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <parse_data>:
{
	
	int colorIndex = 0;
	//checks for start key
	int i;
	for (i = 0;i < MAXDATA; i++)
 87a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <MAXDATA>
 87e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <MAXDATA+0x1>
 882:	12 16       	cp	r1, r18
 884:	13 06       	cpc	r1, r19
 886:	44 f5       	brge	.+80     	; 0x8d8 <parse_data+0x5e>
 888:	fc 01       	movw	r30, r24
 88a:	28 0f       	add	r18, r24
 88c:	39 1f       	adc	r19, r25
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	50 e0       	ldi	r21, 0x00	; 0
	{		
		//checks for start key
		if (data[i] == STARTKEY)
 892:	91 91       	ld	r25, Z+
 894:	97 33       	cpi	r25, 0x37	; 55
 896:	39 f4       	brne	.+14     	; 0x8a6 <parse_data+0x2c>
			// checks if step and speed
			/*PORTD |= (1<<PD3);
			_delay_ms(100);
			PORTD &= (0<<PD3);*/
			
			step = data[i+1];
 898:	80 81       	ld	r24, Z
 89a:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <step>
			speed = data[i+2];					
 89e:	81 81       	ldd	r24, Z+1	; 0x01
 8a0:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <speed>
 8a4:	16 c0       	rjmp	.+44     	; 0x8d2 <parse_data+0x58>
		}
		else if (data[i] == COLORKEY)
 8a6:	92 30       	cpi	r25, 0x02	; 2
 8a8:	91 f4       	brne	.+36     	; 0x8ce <parse_data+0x54>
			/*PORTD |= (1<<PD6);
			_delay_ms(100);
			PORTD &= (0<<PD6);*/
			
			//stores colors
			red[colorIndex] = data[i+1];
 8aa:	80 81       	ld	r24, Z
 8ac:	da 01       	movw	r26, r20
 8ae:	a2 57       	subi	r26, 0x72	; 114
 8b0:	bb 4f       	sbci	r27, 0xFB	; 251
 8b2:	8c 93       	st	X, r24
			green[colorIndex] = data[i+2];
 8b4:	81 81       	ldd	r24, Z+1	; 0x01
 8b6:	da 01       	movw	r26, r20
 8b8:	a4 5a       	subi	r26, 0xA4	; 164
 8ba:	bb 4f       	sbci	r27, 0xFB	; 251
 8bc:	8c 93       	st	X, r24
			blue[colorIndex] = data[i+3];
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	da 01       	movw	r26, r20
 8c2:	a6 5d       	subi	r26, 0xD6	; 214
 8c4:	bb 4f       	sbci	r27, 0xFB	; 251
 8c6:	8c 93       	st	X, r24
			colorIndex++;
 8c8:	4f 5f       	subi	r20, 0xFF	; 255
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <parse_data+0x58>
		}
		else if (data[i] == STOPKEY)
 8ce:	9f 35       	cpi	r25, 0x5F	; 95
 8d0:	19 f0       	breq	.+6      	; 0x8d8 <parse_data+0x5e>
{
	
	int colorIndex = 0;
	//checks for start key
	int i;
	for (i = 0;i < MAXDATA; i++)
 8d2:	e2 17       	cp	r30, r18
 8d4:	f3 07       	cpc	r31, r19
 8d6:	e9 f6       	brne	.-70     	; 0x892 <parse_data+0x18>
 8d8:	08 95       	ret

000008da <light_em_up>:
}
void light_em_up(void)
{
	
	
	redPWM = gamma8[(255-red[0])];
 8da:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <red>
 8de:	8f ef       	ldi	r24, 0xFF	; 255
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	fc 01       	movw	r30, r24
 8e4:	e2 1b       	sub	r30, r18
 8e6:	f1 09       	sbc	r31, r1
 8e8:	e8 5e       	subi	r30, 0xE8	; 232
 8ea:	fe 4f       	sbci	r31, 0xFE	; 254
 8ec:	20 81       	ld	r18, Z
 8ee:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	grnPWM = gamma8[(255-green[0])];
 8f2:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <green>
 8f6:	fc 01       	movw	r30, r24
 8f8:	e2 1b       	sub	r30, r18
 8fa:	f1 09       	sbc	r31, r1
 8fc:	e8 5e       	subi	r30, 0xE8	; 232
 8fe:	fe 4f       	sbci	r31, 0xFE	; 254
 900:	20 81       	ld	r18, Z
 902:	28 bd       	out	0x28, r18	; 40
	bluPWM = gamma8[(255-blue[0])];
 904:	20 91 2a 04 	lds	r18, 0x042A	; 0x80042a <blue>
 908:	82 1b       	sub	r24, r18
 90a:	91 09       	sbc	r25, r1
 90c:	fc 01       	movw	r30, r24
 90e:	e8 5e       	subi	r30, 0xE8	; 232
 910:	fe 4f       	sbci	r31, 0xFE	; 254
 912:	80 81       	ld	r24, Z
 914:	87 bd       	out	0x27, r24	; 39
 916:	08 95       	ret

00000918 <copy_buffer>:
}
void copy_buffer(volatile uint8_t *rxbuffer)
{
 918:	dc 01       	movw	r26, r24
 91a:	e0 ec       	ldi	r30, 0xC0	; 192
 91c:	f4 e0       	ldi	r31, 0x04	; 4
 91e:	2f eb       	ldi	r18, 0xBF	; 191
 920:	35 e0       	ldi	r19, 0x05	; 5
	  _delay_ms(100);
	  PORTD &= (0<<PD3);
	  _delay_ms(100);*/
	  int i = 0;
	  for (i = 0; i < 0xFF; ++i){
		  light_data[i] = rxbuffer[i];
 922:	8d 91       	ld	r24, X+
 924:	81 93       	st	Z+, r24
	  /*PORTD |= (1<<PD3);
	  _delay_ms(100);
	  PORTD &= (0<<PD3);
	  _delay_ms(100);*/
	  int i = 0;
	  for (i = 0; i < 0xFF; ++i){
 926:	e2 17       	cp	r30, r18
 928:	f3 07       	cpc	r31, r19
 92a:	d9 f7       	brne	.-10     	; 0x922 <copy_buffer+0xa>
		  light_data[i] = rxbuffer[i];
	  }
	
}
 92c:	08 95       	ret

0000092e <init_io>:

void init_io(void) {
	 DDRD |= (1<<redPin); //red
 92e:	53 9a       	sbi	0x0a, 3	; 10
	 DDRD |= (1<<bluPin); //blue
 930:	56 9a       	sbi	0x0a, 6	; 10
	 DDRD |= (1<<grnPin); //green
 932:	55 9a       	sbi	0x0a, 5	; 10
	 
	 DDRD |= (_BV(PD6) | _BV(PD5) | _BV(PD3)); //enable output pins for LED strip
 934:	8a b1       	in	r24, 0x0a	; 10
 936:	88 66       	ori	r24, 0x68	; 104
 938:	8a b9       	out	0x0a, r24	; 10
	     
    ENCDDR &= ~(_BV(ENC1A_DDR) |
 93a:	87 b1       	in	r24, 0x07	; 7
 93c:	80 7c       	andi	r24, 0xC0	; 192
 93e:	87 b9       	out	0x07, r24	; 7
    _BV(ENC2A_DDR) |
    _BV(ENC2B_DDR) |
    _BV(ENC3A_DDR) |
    _BV(ENC3B_DDR)); //setup encoder pins as input
	     
    ENCPORT |= (_BV(ENC1A_PORT) |
 940:	88 b1       	in	r24, 0x08	; 8
 942:	8f 63       	ori	r24, 0x3F	; 63
 944:	88 b9       	out	0x08, r24	; 8
 946:	08 95       	ret

00000948 <pwm_init>:
}

void pwm_init(void)
{
	//Fast PWM mode for timers 0 and 2 (p.106)
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 948:	84 b5       	in	r24, 0x24	; 36
 94a:	83 60       	ori	r24, 0x03	; 3
 94c:	84 bd       	out	0x24, r24	; 36
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
 94e:	e0 eb       	ldi	r30, 0xB0	; 176
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	83 60       	ori	r24, 0x03	; 3
 956:	80 83       	st	Z, r24
	
	// clear OC0A on compare match, set on BOTTOM (inverting) (p.104)
	// 255 is fully off, 0 is fully on
	TCCR0A |= (1 << COM0A1) | (1 << COM0A0) | (1 << COM0B1) | (1 << COM0B0); // set for A0 & B0
 958:	84 b5       	in	r24, 0x24	; 36
 95a:	80 6f       	ori	r24, 0xF0	; 240
 95c:	84 bd       	out	0x24, r24	; 36
	TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 95e:	80 81       	ld	r24, Z
 960:	80 63       	ori	r24, 0x30	; 48
 962:	80 83       	st	Z, r24
	
	// Use clock directly, no prescaler (p.107)
	TCCR0B |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 964:	85 b5       	in	r24, 0x25	; 37
 966:	81 60       	ori	r24, 0x01	; 1
 968:	85 bd       	out	0x25, r24	; 37
	TCCR2B |= (0 << CS22) | (0 << CS21) | (1 << CS20);
 96a:	e1 eb       	ldi	r30, 0xB1	; 177
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	81 60       	ori	r24, 0x01	; 1
 972:	80 83       	st	Z, r24
	
	// initialize counter for TIMER 0 and TIMER 2 (p.108)
	TCNT0 = 0;
 974:	16 bc       	out	0x26, r1	; 38
	TCNT2 = 0;
 976:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 97a:	08 95       	ret

0000097c <main>:
}

int main(void)
{
    init_io(); //initialized LED's
 97c:	0e 94 97 04 	call	0x92e	; 0x92e <init_io>
	pwm_init();//V Important
 980:	0e 94 a4 04 	call	0x948	; 0x948 <pwm_init>
	init_interrupts();//for encoders
 984:	0e 94 83 03 	call	0x706	; 0x706 <init_interrupts>
	I2C_init(0x69); 
 988:	89 e6       	ldi	r24, 0x69	; 105
 98a:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_init>
	
	sei(); //allows interrupts
 98e:	78 94       	sei
	
    while (1) 
    {
		copy_buffer(rxbuffer);		
		parse_data(light_data);
		if(red[0]||green[0]||blue[0]){
 990:	ce e8       	ldi	r28, 0x8E	; 142
 992:	d4 e0       	ldi	r29, 0x04	; 4
 994:	0c e5       	ldi	r16, 0x5C	; 92
 996:	14 e0       	ldi	r17, 0x04	; 4
 998:	0f 2e       	mov	r0, r31
 99a:	fa e2       	ldi	r31, 0x2A	; 42
 99c:	ef 2e       	mov	r14, r31
 99e:	f4 e0       	ldi	r31, 0x04	; 4
 9a0:	ff 2e       	mov	r15, r31
 9a2:	f0 2d       	mov	r31, r0
	
	sei(); //allows interrupts
	
    while (1) 
    {
		copy_buffer(rxbuffer);		
 9a4:	89 e1       	ldi	r24, 0x19	; 25
 9a6:	93 e0       	ldi	r25, 0x03	; 3
 9a8:	0e 94 8c 04 	call	0x918	; 0x918 <copy_buffer>
		parse_data(light_data);
 9ac:	80 ec       	ldi	r24, 0xC0	; 192
 9ae:	94 e0       	ldi	r25, 0x04	; 4
 9b0:	0e 94 3d 04 	call	0x87a	; 0x87a <parse_data>
		if(red[0]||green[0]||blue[0]){
 9b4:	88 81       	ld	r24, Y
 9b6:	81 11       	cpse	r24, r1
 9b8:	08 c0       	rjmp	.+16     	; 0x9ca <main+0x4e>
 9ba:	f8 01       	movw	r30, r16
 9bc:	80 81       	ld	r24, Z
 9be:	81 11       	cpse	r24, r1
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <main+0x4e>
 9c2:	f7 01       	movw	r30, r14
 9c4:	80 81       	ld	r24, Z
 9c6:	88 23       	and	r24, r24
 9c8:	19 f0       	breq	.+6      	; 0x9d0 <main+0x54>
			light_em_up();
 9ca:	0e 94 6d 04 	call	0x8da	; 0x8da <light_em_up>
 9ce:	ea cf       	rjmp	.-44     	; 0x9a4 <main+0x28>
		}
		else{
			loop_colors();
 9d0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <loop_colors>
 9d4:	e7 cf       	rjmp	.-50     	; 0x9a4 <main+0x28>

000009d6 <__subsf3>:
 9d6:	50 58       	subi	r21, 0x80	; 128

000009d8 <__addsf3>:
 9d8:	bb 27       	eor	r27, r27
 9da:	aa 27       	eor	r26, r26
 9dc:	0e 94 03 05 	call	0xa06	; 0xa06 <__addsf3x>
 9e0:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_round>
 9e4:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscA>
 9e8:	38 f0       	brcs	.+14     	; 0x9f8 <__addsf3+0x20>
 9ea:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscB>
 9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3+0x20>
 9f0:	39 f4       	brne	.+14     	; 0xa00 <__addsf3+0x28>
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	19 f4       	brne	.+6      	; 0x9fc <__addsf3+0x24>
 9f6:	26 f4       	brtc	.+8      	; 0xa00 <__addsf3+0x28>
 9f8:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_nan>
 9fc:	0e f4       	brtc	.+2      	; 0xa00 <__addsf3+0x28>
 9fe:	e0 95       	com	r30
 a00:	e7 fb       	bst	r30, 7
 a02:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>

00000a06 <__addsf3x>:
 a06:	e9 2f       	mov	r30, r25
 a08:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_split3>
 a0c:	58 f3       	brcs	.-42     	; 0x9e4 <__addsf3+0xc>
 a0e:	ba 17       	cp	r27, r26
 a10:	62 07       	cpc	r22, r18
 a12:	73 07       	cpc	r23, r19
 a14:	84 07       	cpc	r24, r20
 a16:	95 07       	cpc	r25, r21
 a18:	20 f0       	brcs	.+8      	; 0xa22 <__addsf3x+0x1c>
 a1a:	79 f4       	brne	.+30     	; 0xa3a <__addsf3x+0x34>
 a1c:	a6 f5       	brtc	.+104    	; 0xa86 <__addsf3x+0x80>
 a1e:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__fp_zero>
 a22:	0e f4       	brtc	.+2      	; 0xa26 <__addsf3x+0x20>
 a24:	e0 95       	com	r30
 a26:	0b 2e       	mov	r0, r27
 a28:	ba 2f       	mov	r27, r26
 a2a:	a0 2d       	mov	r26, r0
 a2c:	0b 01       	movw	r0, r22
 a2e:	b9 01       	movw	r22, r18
 a30:	90 01       	movw	r18, r0
 a32:	0c 01       	movw	r0, r24
 a34:	ca 01       	movw	r24, r20
 a36:	a0 01       	movw	r20, r0
 a38:	11 24       	eor	r1, r1
 a3a:	ff 27       	eor	r31, r31
 a3c:	59 1b       	sub	r21, r25
 a3e:	99 f0       	breq	.+38     	; 0xa66 <__addsf3x+0x60>
 a40:	59 3f       	cpi	r21, 0xF9	; 249
 a42:	50 f4       	brcc	.+20     	; 0xa58 <__addsf3x+0x52>
 a44:	50 3e       	cpi	r21, 0xE0	; 224
 a46:	68 f1       	brcs	.+90     	; 0xaa2 <__addsf3x+0x9c>
 a48:	1a 16       	cp	r1, r26
 a4a:	f0 40       	sbci	r31, 0x00	; 0
 a4c:	a2 2f       	mov	r26, r18
 a4e:	23 2f       	mov	r18, r19
 a50:	34 2f       	mov	r19, r20
 a52:	44 27       	eor	r20, r20
 a54:	58 5f       	subi	r21, 0xF8	; 248
 a56:	f3 cf       	rjmp	.-26     	; 0xa3e <__addsf3x+0x38>
 a58:	46 95       	lsr	r20
 a5a:	37 95       	ror	r19
 a5c:	27 95       	ror	r18
 a5e:	a7 95       	ror	r26
 a60:	f0 40       	sbci	r31, 0x00	; 0
 a62:	53 95       	inc	r21
 a64:	c9 f7       	brne	.-14     	; 0xa58 <__addsf3x+0x52>
 a66:	7e f4       	brtc	.+30     	; 0xa86 <__addsf3x+0x80>
 a68:	1f 16       	cp	r1, r31
 a6a:	ba 0b       	sbc	r27, r26
 a6c:	62 0b       	sbc	r22, r18
 a6e:	73 0b       	sbc	r23, r19
 a70:	84 0b       	sbc	r24, r20
 a72:	ba f0       	brmi	.+46     	; 0xaa2 <__addsf3x+0x9c>
 a74:	91 50       	subi	r25, 0x01	; 1
 a76:	a1 f0       	breq	.+40     	; 0xaa0 <__addsf3x+0x9a>
 a78:	ff 0f       	add	r31, r31
 a7a:	bb 1f       	adc	r27, r27
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	c2 f7       	brpl	.-16     	; 0xa74 <__addsf3x+0x6e>
 a84:	0e c0       	rjmp	.+28     	; 0xaa2 <__addsf3x+0x9c>
 a86:	ba 0f       	add	r27, r26
 a88:	62 1f       	adc	r22, r18
 a8a:	73 1f       	adc	r23, r19
 a8c:	84 1f       	adc	r24, r20
 a8e:	48 f4       	brcc	.+18     	; 0xaa2 <__addsf3x+0x9c>
 a90:	87 95       	ror	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b7 95       	ror	r27
 a98:	f7 95       	ror	r31
 a9a:	9e 3f       	cpi	r25, 0xFE	; 254
 a9c:	08 f0       	brcs	.+2      	; 0xaa0 <__addsf3x+0x9a>
 a9e:	b0 cf       	rjmp	.-160    	; 0xa00 <__addsf3+0x28>
 aa0:	93 95       	inc	r25
 aa2:	88 0f       	add	r24, r24
 aa4:	08 f0       	brcs	.+2      	; 0xaa8 <__addsf3x+0xa2>
 aa6:	99 27       	eor	r25, r25
 aa8:	ee 0f       	add	r30, r30
 aaa:	97 95       	ror	r25
 aac:	87 95       	ror	r24
 aae:	08 95       	ret

00000ab0 <__cmpsf2>:
 ab0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_cmp>
 ab4:	08 f4       	brcc	.+2      	; 0xab8 <__cmpsf2+0x8>
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	08 95       	ret

00000aba <cos>:
 aba:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_rempio2>
 abe:	e3 95       	inc	r30
 ac0:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_sinus>

00000ac4 <__divsf3>:
 ac4:	0e 94 76 05 	call	0xaec	; 0xaec <__divsf3x>
 ac8:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_round>
 acc:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscB>
 ad0:	58 f0       	brcs	.+22     	; 0xae8 <__divsf3+0x24>
 ad2:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscA>
 ad6:	40 f0       	brcs	.+16     	; 0xae8 <__divsf3+0x24>
 ad8:	29 f4       	brne	.+10     	; 0xae4 <__divsf3+0x20>
 ada:	5f 3f       	cpi	r21, 0xFF	; 255
 adc:	29 f0       	breq	.+10     	; 0xae8 <__divsf3+0x24>
 ade:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 ae2:	51 11       	cpse	r21, r1
 ae4:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>
 ae8:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_nan>

00000aec <__divsf3x>:
 aec:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_split3>
 af0:	68 f3       	brcs	.-38     	; 0xacc <__divsf3+0x8>

00000af2 <__divsf3_pse>:
 af2:	99 23       	and	r25, r25
 af4:	b1 f3       	breq	.-20     	; 0xae2 <__divsf3+0x1e>
 af6:	55 23       	and	r21, r21
 af8:	91 f3       	breq	.-28     	; 0xade <__divsf3+0x1a>
 afa:	95 1b       	sub	r25, r21
 afc:	55 0b       	sbc	r21, r21
 afe:	bb 27       	eor	r27, r27
 b00:	aa 27       	eor	r26, r26
 b02:	62 17       	cp	r22, r18
 b04:	73 07       	cpc	r23, r19
 b06:	84 07       	cpc	r24, r20
 b08:	38 f0       	brcs	.+14     	; 0xb18 <__divsf3_pse+0x26>
 b0a:	9f 5f       	subi	r25, 0xFF	; 255
 b0c:	5f 4f       	sbci	r21, 0xFF	; 255
 b0e:	22 0f       	add	r18, r18
 b10:	33 1f       	adc	r19, r19
 b12:	44 1f       	adc	r20, r20
 b14:	aa 1f       	adc	r26, r26
 b16:	a9 f3       	breq	.-22     	; 0xb02 <__divsf3_pse+0x10>
 b18:	35 d0       	rcall	.+106    	; 0xb84 <__divsf3_pse+0x92>
 b1a:	0e 2e       	mov	r0, r30
 b1c:	3a f0       	brmi	.+14     	; 0xb2c <__divsf3_pse+0x3a>
 b1e:	e0 e8       	ldi	r30, 0x80	; 128
 b20:	32 d0       	rcall	.+100    	; 0xb86 <__divsf3_pse+0x94>
 b22:	91 50       	subi	r25, 0x01	; 1
 b24:	50 40       	sbci	r21, 0x00	; 0
 b26:	e6 95       	lsr	r30
 b28:	00 1c       	adc	r0, r0
 b2a:	ca f7       	brpl	.-14     	; 0xb1e <__divsf3_pse+0x2c>
 b2c:	2b d0       	rcall	.+86     	; 0xb84 <__divsf3_pse+0x92>
 b2e:	fe 2f       	mov	r31, r30
 b30:	29 d0       	rcall	.+82     	; 0xb84 <__divsf3_pse+0x92>
 b32:	66 0f       	add	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	bb 1f       	adc	r27, r27
 b3a:	26 17       	cp	r18, r22
 b3c:	37 07       	cpc	r19, r23
 b3e:	48 07       	cpc	r20, r24
 b40:	ab 07       	cpc	r26, r27
 b42:	b0 e8       	ldi	r27, 0x80	; 128
 b44:	09 f0       	breq	.+2      	; 0xb48 <__divsf3_pse+0x56>
 b46:	bb 0b       	sbc	r27, r27
 b48:	80 2d       	mov	r24, r0
 b4a:	bf 01       	movw	r22, r30
 b4c:	ff 27       	eor	r31, r31
 b4e:	93 58       	subi	r25, 0x83	; 131
 b50:	5f 4f       	sbci	r21, 0xFF	; 255
 b52:	3a f0       	brmi	.+14     	; 0xb62 <__divsf3_pse+0x70>
 b54:	9e 3f       	cpi	r25, 0xFE	; 254
 b56:	51 05       	cpc	r21, r1
 b58:	78 f0       	brcs	.+30     	; 0xb78 <__divsf3_pse+0x86>
 b5a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 b5e:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>
 b62:	5f 3f       	cpi	r21, 0xFF	; 255
 b64:	e4 f3       	brlt	.-8      	; 0xb5e <__divsf3_pse+0x6c>
 b66:	98 3e       	cpi	r25, 0xE8	; 232
 b68:	d4 f3       	brlt	.-12     	; 0xb5e <__divsf3_pse+0x6c>
 b6a:	86 95       	lsr	r24
 b6c:	77 95       	ror	r23
 b6e:	67 95       	ror	r22
 b70:	b7 95       	ror	r27
 b72:	f7 95       	ror	r31
 b74:	9f 5f       	subi	r25, 0xFF	; 255
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__divsf3_pse+0x78>
 b78:	88 0f       	add	r24, r24
 b7a:	91 1d       	adc	r25, r1
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret
 b84:	e1 e0       	ldi	r30, 0x01	; 1
 b86:	66 0f       	add	r22, r22
 b88:	77 1f       	adc	r23, r23
 b8a:	88 1f       	adc	r24, r24
 b8c:	bb 1f       	adc	r27, r27
 b8e:	62 17       	cp	r22, r18
 b90:	73 07       	cpc	r23, r19
 b92:	84 07       	cpc	r24, r20
 b94:	ba 07       	cpc	r27, r26
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__divsf3_pse+0xae>
 b98:	62 1b       	sub	r22, r18
 b9a:	73 0b       	sbc	r23, r19
 b9c:	84 0b       	sbc	r24, r20
 b9e:	ba 0b       	sbc	r27, r26
 ba0:	ee 1f       	adc	r30, r30
 ba2:	88 f7       	brcc	.-30     	; 0xb86 <__divsf3_pse+0x94>
 ba4:	e0 95       	com	r30
 ba6:	08 95       	ret

00000ba8 <__fixsfsi>:
 ba8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fixunssfsi>
 bac:	68 94       	set
 bae:	b1 11       	cpse	r27, r1
 bb0:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>
 bb4:	08 95       	ret

00000bb6 <__fixunssfsi>:
 bb6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_splitA>
 bba:	88 f0       	brcs	.+34     	; 0xbde <__fixunssfsi+0x28>
 bbc:	9f 57       	subi	r25, 0x7F	; 127
 bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__fixunssfsi+0x30>
 bc0:	b9 2f       	mov	r27, r25
 bc2:	99 27       	eor	r25, r25
 bc4:	b7 51       	subi	r27, 0x17	; 23
 bc6:	b0 f0       	brcs	.+44     	; 0xbf4 <__fixunssfsi+0x3e>
 bc8:	e1 f0       	breq	.+56     	; 0xc02 <__fixunssfsi+0x4c>
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	1a f0       	brmi	.+6      	; 0xbda <__fixunssfsi+0x24>
 bd4:	ba 95       	dec	r27
 bd6:	c9 f7       	brne	.-14     	; 0xbca <__fixunssfsi+0x14>
 bd8:	14 c0       	rjmp	.+40     	; 0xc02 <__fixunssfsi+0x4c>
 bda:	b1 30       	cpi	r27, 0x01	; 1
 bdc:	91 f0       	breq	.+36     	; 0xc02 <__fixunssfsi+0x4c>
 bde:	0e 94 19 07 	call	0xe32	; 0xe32 <__fp_zero>
 be2:	b1 e0       	ldi	r27, 0x01	; 1
 be4:	08 95       	ret
 be6:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__fp_zero>
 bea:	67 2f       	mov	r22, r23
 bec:	78 2f       	mov	r23, r24
 bee:	88 27       	eor	r24, r24
 bf0:	b8 5f       	subi	r27, 0xF8	; 248
 bf2:	39 f0       	breq	.+14     	; 0xc02 <__fixunssfsi+0x4c>
 bf4:	b9 3f       	cpi	r27, 0xF9	; 249
 bf6:	cc f3       	brlt	.-14     	; 0xbea <__fixunssfsi+0x34>
 bf8:	86 95       	lsr	r24
 bfa:	77 95       	ror	r23
 bfc:	67 95       	ror	r22
 bfe:	b3 95       	inc	r27
 c00:	d9 f7       	brne	.-10     	; 0xbf8 <__fixunssfsi+0x42>
 c02:	3e f4       	brtc	.+14     	; 0xc12 <__fixunssfsi+0x5c>
 c04:	90 95       	com	r25
 c06:	80 95       	com	r24
 c08:	70 95       	com	r23
 c0a:	61 95       	neg	r22
 c0c:	7f 4f       	sbci	r23, 0xFF	; 255
 c0e:	8f 4f       	sbci	r24, 0xFF	; 255
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret
 c14:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscA>
 c18:	20 f0       	brcs	.+8      	; 0xc22 <__fixunssfsi+0x6c>
 c1a:	19 f0       	breq	.+6      	; 0xc22 <__fixunssfsi+0x6c>
 c1c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscB>
 c20:	50 f4       	brcc	.+20     	; 0xc36 <fmod+0xc>
 c22:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_nan>
 c26:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>

00000c2a <fmod>:
 c2a:	e9 2f       	mov	r30, r25
 c2c:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_split3>
 c30:	88 f3       	brcs	.-30     	; 0xc14 <__fixunssfsi+0x5e>
 c32:	55 23       	and	r21, r21
 c34:	b1 f3       	breq	.-20     	; 0xc22 <__fixunssfsi+0x6c>
 c36:	e7 fb       	bst	r30, 7
 c38:	62 17       	cp	r22, r18
 c3a:	73 07       	cpc	r23, r19
 c3c:	84 07       	cpc	r24, r20
 c3e:	95 07       	cpc	r25, r21
 c40:	a8 f1       	brcs	.+106    	; 0xcac <fmod+0x82>
 c42:	89 f3       	breq	.-30     	; 0xc26 <__fixunssfsi+0x70>
 c44:	e9 2f       	mov	r30, r25
 c46:	ff 27       	eor	r31, r31
 c48:	88 23       	and	r24, r24
 c4a:	2a f0       	brmi	.+10     	; 0xc56 <fmod+0x2c>
 c4c:	31 97       	sbiw	r30, 0x01	; 1
 c4e:	66 0f       	add	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	da f7       	brpl	.-10     	; 0xc4c <fmod+0x22>
 c56:	95 2f       	mov	r25, r21
 c58:	55 27       	eor	r21, r21
 c5a:	44 23       	and	r20, r20
 c5c:	32 f0       	brmi	.+12     	; 0xc6a <fmod+0x40>
 c5e:	91 50       	subi	r25, 0x01	; 1
 c60:	50 40       	sbci	r21, 0x00	; 0
 c62:	22 0f       	add	r18, r18
 c64:	33 1f       	adc	r19, r19
 c66:	44 1f       	adc	r20, r20
 c68:	d2 f7       	brpl	.-12     	; 0xc5e <fmod+0x34>
 c6a:	bb 27       	eor	r27, r27
 c6c:	e9 1b       	sub	r30, r25
 c6e:	f5 0b       	sbc	r31, r21
 c70:	62 1b       	sub	r22, r18
 c72:	73 0b       	sbc	r23, r19
 c74:	84 0b       	sbc	r24, r20
 c76:	b1 09       	sbc	r27, r1
 c78:	b1 f2       	breq	.-84     	; 0xc26 <__fixunssfsi+0x70>
 c7a:	22 f4       	brpl	.+8      	; 0xc84 <fmod+0x5a>
 c7c:	62 0f       	add	r22, r18
 c7e:	73 1f       	adc	r23, r19
 c80:	84 1f       	adc	r24, r20
 c82:	b1 1d       	adc	r27, r1
 c84:	31 97       	sbiw	r30, 0x01	; 1
 c86:	2a f0       	brmi	.+10     	; 0xc92 <fmod+0x68>
 c88:	66 0f       	add	r22, r22
 c8a:	77 1f       	adc	r23, r23
 c8c:	88 1f       	adc	r24, r24
 c8e:	bb 1f       	adc	r27, r27
 c90:	ef cf       	rjmp	.-34     	; 0xc70 <fmod+0x46>
 c92:	91 50       	subi	r25, 0x01	; 1
 c94:	50 40       	sbci	r21, 0x00	; 0
 c96:	62 f0       	brmi	.+24     	; 0xcb0 <fmod+0x86>
 c98:	41 f0       	breq	.+16     	; 0xcaa <fmod+0x80>
 c9a:	88 23       	and	r24, r24
 c9c:	32 f0       	brmi	.+12     	; 0xcaa <fmod+0x80>
 c9e:	66 0f       	add	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	91 50       	subi	r25, 0x01	; 1
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	c1 f7       	brne	.-16     	; 0xc9a <fmod+0x70>
 caa:	93 95       	inc	r25
 cac:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_mpack>
 cb0:	86 95       	lsr	r24
 cb2:	77 95       	ror	r23
 cb4:	67 95       	ror	r22
 cb6:	9f 5f       	subi	r25, 0xFF	; 255
 cb8:	d9 f7       	brne	.-10     	; 0xcb0 <fmod+0x86>
 cba:	f7 cf       	rjmp	.-18     	; 0xcaa <fmod+0x80>

00000cbc <__fp_cmp>:
 cbc:	99 0f       	add	r25, r25
 cbe:	00 08       	sbc	r0, r0
 cc0:	55 0f       	add	r21, r21
 cc2:	aa 0b       	sbc	r26, r26
 cc4:	e0 e8       	ldi	r30, 0x80	; 128
 cc6:	fe ef       	ldi	r31, 0xFE	; 254
 cc8:	16 16       	cp	r1, r22
 cca:	17 06       	cpc	r1, r23
 ccc:	e8 07       	cpc	r30, r24
 cce:	f9 07       	cpc	r31, r25
 cd0:	c0 f0       	brcs	.+48     	; 0xd02 <__fp_cmp+0x46>
 cd2:	12 16       	cp	r1, r18
 cd4:	13 06       	cpc	r1, r19
 cd6:	e4 07       	cpc	r30, r20
 cd8:	f5 07       	cpc	r31, r21
 cda:	98 f0       	brcs	.+38     	; 0xd02 <__fp_cmp+0x46>
 cdc:	62 1b       	sub	r22, r18
 cde:	73 0b       	sbc	r23, r19
 ce0:	84 0b       	sbc	r24, r20
 ce2:	95 0b       	sbc	r25, r21
 ce4:	39 f4       	brne	.+14     	; 0xcf4 <__fp_cmp+0x38>
 ce6:	0a 26       	eor	r0, r26
 ce8:	61 f0       	breq	.+24     	; 0xd02 <__fp_cmp+0x46>
 cea:	23 2b       	or	r18, r19
 cec:	24 2b       	or	r18, r20
 cee:	25 2b       	or	r18, r21
 cf0:	21 f4       	brne	.+8      	; 0xcfa <__fp_cmp+0x3e>
 cf2:	08 95       	ret
 cf4:	0a 26       	eor	r0, r26
 cf6:	09 f4       	brne	.+2      	; 0xcfa <__fp_cmp+0x3e>
 cf8:	a1 40       	sbci	r26, 0x01	; 1
 cfa:	a6 95       	lsr	r26
 cfc:	8f ef       	ldi	r24, 0xFF	; 255
 cfe:	81 1d       	adc	r24, r1
 d00:	81 1d       	adc	r24, r1
 d02:	08 95       	ret

00000d04 <__fp_inf>:
 d04:	97 f9       	bld	r25, 7
 d06:	9f 67       	ori	r25, 0x7F	; 127
 d08:	80 e8       	ldi	r24, 0x80	; 128
 d0a:	70 e0       	ldi	r23, 0x00	; 0
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	08 95       	ret

00000d10 <__fp_mpack>:
 d10:	9f 3f       	cpi	r25, 0xFF	; 255
 d12:	31 f0       	breq	.+12     	; 0xd20 <__fp_mpack_finite+0xc>

00000d14 <__fp_mpack_finite>:
 d14:	91 50       	subi	r25, 0x01	; 1
 d16:	20 f4       	brcc	.+8      	; 0xd20 <__fp_mpack_finite+0xc>
 d18:	87 95       	ror	r24
 d1a:	77 95       	ror	r23
 d1c:	67 95       	ror	r22
 d1e:	b7 95       	ror	r27
 d20:	88 0f       	add	r24, r24
 d22:	91 1d       	adc	r25, r1
 d24:	96 95       	lsr	r25
 d26:	87 95       	ror	r24
 d28:	97 f9       	bld	r25, 7
 d2a:	08 95       	ret

00000d2c <__fp_nan>:
 d2c:	9f ef       	ldi	r25, 0xFF	; 255
 d2e:	80 ec       	ldi	r24, 0xC0	; 192
 d30:	08 95       	ret

00000d32 <__fp_pscA>:
 d32:	00 24       	eor	r0, r0
 d34:	0a 94       	dec	r0
 d36:	16 16       	cp	r1, r22
 d38:	17 06       	cpc	r1, r23
 d3a:	18 06       	cpc	r1, r24
 d3c:	09 06       	cpc	r0, r25
 d3e:	08 95       	ret

00000d40 <__fp_pscB>:
 d40:	00 24       	eor	r0, r0
 d42:	0a 94       	dec	r0
 d44:	12 16       	cp	r1, r18
 d46:	13 06       	cpc	r1, r19
 d48:	14 06       	cpc	r1, r20
 d4a:	05 06       	cpc	r0, r21
 d4c:	08 95       	ret
 d4e:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_nan>

00000d52 <__fp_rempio2>:
 d52:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_splitA>
 d56:	d8 f3       	brcs	.-10     	; 0xd4e <__fp_pscB+0xe>
 d58:	e8 94       	clt
 d5a:	e0 e0       	ldi	r30, 0x00	; 0
 d5c:	bb 27       	eor	r27, r27
 d5e:	9f 57       	subi	r25, 0x7F	; 127
 d60:	f0 f0       	brcs	.+60     	; 0xd9e <__fp_rempio2+0x4c>
 d62:	2a ed       	ldi	r18, 0xDA	; 218
 d64:	3f e0       	ldi	r19, 0x0F	; 15
 d66:	49 ec       	ldi	r20, 0xC9	; 201
 d68:	06 c0       	rjmp	.+12     	; 0xd76 <__fp_rempio2+0x24>
 d6a:	ee 0f       	add	r30, r30
 d6c:	bb 0f       	add	r27, r27
 d6e:	66 1f       	adc	r22, r22
 d70:	77 1f       	adc	r23, r23
 d72:	88 1f       	adc	r24, r24
 d74:	28 f0       	brcs	.+10     	; 0xd80 <__fp_rempio2+0x2e>
 d76:	b2 3a       	cpi	r27, 0xA2	; 162
 d78:	62 07       	cpc	r22, r18
 d7a:	73 07       	cpc	r23, r19
 d7c:	84 07       	cpc	r24, r20
 d7e:	28 f0       	brcs	.+10     	; 0xd8a <__fp_rempio2+0x38>
 d80:	b2 5a       	subi	r27, 0xA2	; 162
 d82:	62 0b       	sbc	r22, r18
 d84:	73 0b       	sbc	r23, r19
 d86:	84 0b       	sbc	r24, r20
 d88:	e3 95       	inc	r30
 d8a:	9a 95       	dec	r25
 d8c:	72 f7       	brpl	.-36     	; 0xd6a <__fp_rempio2+0x18>
 d8e:	80 38       	cpi	r24, 0x80	; 128
 d90:	30 f4       	brcc	.+12     	; 0xd9e <__fp_rempio2+0x4c>
 d92:	9a 95       	dec	r25
 d94:	bb 0f       	add	r27, r27
 d96:	66 1f       	adc	r22, r22
 d98:	77 1f       	adc	r23, r23
 d9a:	88 1f       	adc	r24, r24
 d9c:	d2 f7       	brpl	.-12     	; 0xd92 <__fp_rempio2+0x40>
 d9e:	90 48       	sbci	r25, 0x80	; 128
 da0:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_mpack_finite>

00000da4 <__fp_round>:
 da4:	09 2e       	mov	r0, r25
 da6:	03 94       	inc	r0
 da8:	00 0c       	add	r0, r0
 daa:	11 f4       	brne	.+4      	; 0xdb0 <__fp_round+0xc>
 dac:	88 23       	and	r24, r24
 dae:	52 f0       	brmi	.+20     	; 0xdc4 <__fp_round+0x20>
 db0:	bb 0f       	add	r27, r27
 db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fp_round+0x20>
 db4:	bf 2b       	or	r27, r31
 db6:	11 f4       	brne	.+4      	; 0xdbc <__fp_round+0x18>
 db8:	60 ff       	sbrs	r22, 0
 dba:	04 c0       	rjmp	.+8      	; 0xdc4 <__fp_round+0x20>
 dbc:	6f 5f       	subi	r22, 0xFF	; 255
 dbe:	7f 4f       	sbci	r23, 0xFF	; 255
 dc0:	8f 4f       	sbci	r24, 0xFF	; 255
 dc2:	9f 4f       	sbci	r25, 0xFF	; 255
 dc4:	08 95       	ret

00000dc6 <__fp_sinus>:
 dc6:	ef 93       	push	r30
 dc8:	e0 ff       	sbrs	r30, 0
 dca:	07 c0       	rjmp	.+14     	; 0xdda <__fp_sinus+0x14>
 dcc:	a2 ea       	ldi	r26, 0xA2	; 162
 dce:	2a ed       	ldi	r18, 0xDA	; 218
 dd0:	3f e0       	ldi	r19, 0x0F	; 15
 dd2:	49 ec       	ldi	r20, 0xC9	; 201
 dd4:	5f eb       	ldi	r21, 0xBF	; 191
 dd6:	0e 94 03 05 	call	0xa06	; 0xa06 <__addsf3x>
 dda:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_round>
 dde:	0f 90       	pop	r0
 de0:	03 94       	inc	r0
 de2:	01 fc       	sbrc	r0, 1
 de4:	90 58       	subi	r25, 0x80	; 128
 de6:	e8 e6       	ldi	r30, 0x68	; 104
 de8:	f0 e0       	ldi	r31, 0x00	; 0
 dea:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_powsodd>

00000dee <__fp_split3>:
 dee:	57 fd       	sbrc	r21, 7
 df0:	90 58       	subi	r25, 0x80	; 128
 df2:	44 0f       	add	r20, r20
 df4:	55 1f       	adc	r21, r21
 df6:	59 f0       	breq	.+22     	; 0xe0e <__fp_splitA+0x10>
 df8:	5f 3f       	cpi	r21, 0xFF	; 255
 dfa:	71 f0       	breq	.+28     	; 0xe18 <__fp_splitA+0x1a>
 dfc:	47 95       	ror	r20

00000dfe <__fp_splitA>:
 dfe:	88 0f       	add	r24, r24
 e00:	97 fb       	bst	r25, 7
 e02:	99 1f       	adc	r25, r25
 e04:	61 f0       	breq	.+24     	; 0xe1e <__fp_splitA+0x20>
 e06:	9f 3f       	cpi	r25, 0xFF	; 255
 e08:	79 f0       	breq	.+30     	; 0xe28 <__fp_splitA+0x2a>
 e0a:	87 95       	ror	r24
 e0c:	08 95       	ret
 e0e:	12 16       	cp	r1, r18
 e10:	13 06       	cpc	r1, r19
 e12:	14 06       	cpc	r1, r20
 e14:	55 1f       	adc	r21, r21
 e16:	f2 cf       	rjmp	.-28     	; 0xdfc <__fp_split3+0xe>
 e18:	46 95       	lsr	r20
 e1a:	f1 df       	rcall	.-30     	; 0xdfe <__fp_splitA>
 e1c:	08 c0       	rjmp	.+16     	; 0xe2e <__fp_splitA+0x30>
 e1e:	16 16       	cp	r1, r22
 e20:	17 06       	cpc	r1, r23
 e22:	18 06       	cpc	r1, r24
 e24:	99 1f       	adc	r25, r25
 e26:	f1 cf       	rjmp	.-30     	; 0xe0a <__fp_splitA+0xc>
 e28:	86 95       	lsr	r24
 e2a:	71 05       	cpc	r23, r1
 e2c:	61 05       	cpc	r22, r1
 e2e:	08 94       	sec
 e30:	08 95       	ret

00000e32 <__fp_zero>:
 e32:	e8 94       	clt

00000e34 <__fp_szero>:
 e34:	bb 27       	eor	r27, r27
 e36:	66 27       	eor	r22, r22
 e38:	77 27       	eor	r23, r23
 e3a:	cb 01       	movw	r24, r22
 e3c:	97 f9       	bld	r25, 7
 e3e:	08 95       	ret

00000e40 <__gesf2>:
 e40:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fp_cmp>
 e44:	08 f4       	brcc	.+2      	; 0xe48 <__gesf2+0x8>
 e46:	8f ef       	ldi	r24, 0xFF	; 255
 e48:	08 95       	ret

00000e4a <__mulsf3>:
 e4a:	0e 94 38 07 	call	0xe70	; 0xe70 <__mulsf3x>
 e4e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_round>
 e52:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscA>
 e56:	38 f0       	brcs	.+14     	; 0xe66 <__mulsf3+0x1c>
 e58:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_pscB>
 e5c:	20 f0       	brcs	.+8      	; 0xe66 <__mulsf3+0x1c>
 e5e:	95 23       	and	r25, r21
 e60:	11 f0       	breq	.+4      	; 0xe66 <__mulsf3+0x1c>
 e62:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 e66:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_nan>
 e6a:	11 24       	eor	r1, r1
 e6c:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>

00000e70 <__mulsf3x>:
 e70:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_split3>
 e74:	70 f3       	brcs	.-36     	; 0xe52 <__mulsf3+0x8>

00000e76 <__mulsf3_pse>:
 e76:	95 9f       	mul	r25, r21
 e78:	c1 f3       	breq	.-16     	; 0xe6a <__mulsf3+0x20>
 e7a:	95 0f       	add	r25, r21
 e7c:	50 e0       	ldi	r21, 0x00	; 0
 e7e:	55 1f       	adc	r21, r21
 e80:	62 9f       	mul	r22, r18
 e82:	f0 01       	movw	r30, r0
 e84:	72 9f       	mul	r23, r18
 e86:	bb 27       	eor	r27, r27
 e88:	f0 0d       	add	r31, r0
 e8a:	b1 1d       	adc	r27, r1
 e8c:	63 9f       	mul	r22, r19
 e8e:	aa 27       	eor	r26, r26
 e90:	f0 0d       	add	r31, r0
 e92:	b1 1d       	adc	r27, r1
 e94:	aa 1f       	adc	r26, r26
 e96:	64 9f       	mul	r22, r20
 e98:	66 27       	eor	r22, r22
 e9a:	b0 0d       	add	r27, r0
 e9c:	a1 1d       	adc	r26, r1
 e9e:	66 1f       	adc	r22, r22
 ea0:	82 9f       	mul	r24, r18
 ea2:	22 27       	eor	r18, r18
 ea4:	b0 0d       	add	r27, r0
 ea6:	a1 1d       	adc	r26, r1
 ea8:	62 1f       	adc	r22, r18
 eaa:	73 9f       	mul	r23, r19
 eac:	b0 0d       	add	r27, r0
 eae:	a1 1d       	adc	r26, r1
 eb0:	62 1f       	adc	r22, r18
 eb2:	83 9f       	mul	r24, r19
 eb4:	a0 0d       	add	r26, r0
 eb6:	61 1d       	adc	r22, r1
 eb8:	22 1f       	adc	r18, r18
 eba:	74 9f       	mul	r23, r20
 ebc:	33 27       	eor	r19, r19
 ebe:	a0 0d       	add	r26, r0
 ec0:	61 1d       	adc	r22, r1
 ec2:	23 1f       	adc	r18, r19
 ec4:	84 9f       	mul	r24, r20
 ec6:	60 0d       	add	r22, r0
 ec8:	21 1d       	adc	r18, r1
 eca:	82 2f       	mov	r24, r18
 ecc:	76 2f       	mov	r23, r22
 ece:	6a 2f       	mov	r22, r26
 ed0:	11 24       	eor	r1, r1
 ed2:	9f 57       	subi	r25, 0x7F	; 127
 ed4:	50 40       	sbci	r21, 0x00	; 0
 ed6:	9a f0       	brmi	.+38     	; 0xefe <__mulsf3_pse+0x88>
 ed8:	f1 f0       	breq	.+60     	; 0xf16 <__mulsf3_pse+0xa0>
 eda:	88 23       	and	r24, r24
 edc:	4a f0       	brmi	.+18     	; 0xef0 <__mulsf3_pse+0x7a>
 ede:	ee 0f       	add	r30, r30
 ee0:	ff 1f       	adc	r31, r31
 ee2:	bb 1f       	adc	r27, r27
 ee4:	66 1f       	adc	r22, r22
 ee6:	77 1f       	adc	r23, r23
 ee8:	88 1f       	adc	r24, r24
 eea:	91 50       	subi	r25, 0x01	; 1
 eec:	50 40       	sbci	r21, 0x00	; 0
 eee:	a9 f7       	brne	.-22     	; 0xeda <__mulsf3_pse+0x64>
 ef0:	9e 3f       	cpi	r25, 0xFE	; 254
 ef2:	51 05       	cpc	r21, r1
 ef4:	80 f0       	brcs	.+32     	; 0xf16 <__mulsf3_pse+0xa0>
 ef6:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_inf>
 efa:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_szero>
 efe:	5f 3f       	cpi	r21, 0xFF	; 255
 f00:	e4 f3       	brlt	.-8      	; 0xefa <__mulsf3_pse+0x84>
 f02:	98 3e       	cpi	r25, 0xE8	; 232
 f04:	d4 f3       	brlt	.-12     	; 0xefa <__mulsf3_pse+0x84>
 f06:	86 95       	lsr	r24
 f08:	77 95       	ror	r23
 f0a:	67 95       	ror	r22
 f0c:	b7 95       	ror	r27
 f0e:	f7 95       	ror	r31
 f10:	e7 95       	ror	r30
 f12:	9f 5f       	subi	r25, 0xFF	; 255
 f14:	c1 f7       	brne	.-16     	; 0xf06 <__mulsf3_pse+0x90>
 f16:	fe 2b       	or	r31, r30
 f18:	88 0f       	add	r24, r24
 f1a:	91 1d       	adc	r25, r1
 f1c:	96 95       	lsr	r25
 f1e:	87 95       	ror	r24
 f20:	97 f9       	bld	r25, 7
 f22:	08 95       	ret

00000f24 <__fp_powsodd>:
 f24:	9f 93       	push	r25
 f26:	8f 93       	push	r24
 f28:	7f 93       	push	r23
 f2a:	6f 93       	push	r22
 f2c:	ff 93       	push	r31
 f2e:	ef 93       	push	r30
 f30:	9b 01       	movw	r18, r22
 f32:	ac 01       	movw	r20, r24
 f34:	0e 94 25 07 	call	0xe4a	; 0xe4a <__mulsf3>
 f38:	ef 91       	pop	r30
 f3a:	ff 91       	pop	r31
 f3c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_powser>
 f40:	2f 91       	pop	r18
 f42:	3f 91       	pop	r19
 f44:	4f 91       	pop	r20
 f46:	5f 91       	pop	r21
 f48:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__mulsf3>

00000f4c <__fp_powser>:
 f4c:	df 93       	push	r29
 f4e:	cf 93       	push	r28
 f50:	1f 93       	push	r17
 f52:	0f 93       	push	r16
 f54:	ff 92       	push	r15
 f56:	ef 92       	push	r14
 f58:	df 92       	push	r13
 f5a:	7b 01       	movw	r14, r22
 f5c:	8c 01       	movw	r16, r24
 f5e:	68 94       	set
 f60:	06 c0       	rjmp	.+12     	; 0xf6e <__fp_powser+0x22>
 f62:	da 2e       	mov	r13, r26
 f64:	ef 01       	movw	r28, r30
 f66:	0e 94 38 07 	call	0xe70	; 0xe70 <__mulsf3x>
 f6a:	fe 01       	movw	r30, r28
 f6c:	e8 94       	clt
 f6e:	a5 91       	lpm	r26, Z+
 f70:	25 91       	lpm	r18, Z+
 f72:	35 91       	lpm	r19, Z+
 f74:	45 91       	lpm	r20, Z+
 f76:	55 91       	lpm	r21, Z+
 f78:	a6 f3       	brts	.-24     	; 0xf62 <__fp_powser+0x16>
 f7a:	ef 01       	movw	r28, r30
 f7c:	0e 94 03 05 	call	0xa06	; 0xa06 <__addsf3x>
 f80:	fe 01       	movw	r30, r28
 f82:	97 01       	movw	r18, r14
 f84:	a8 01       	movw	r20, r16
 f86:	da 94       	dec	r13
 f88:	69 f7       	brne	.-38     	; 0xf64 <__fp_powser+0x18>
 f8a:	df 90       	pop	r13
 f8c:	ef 90       	pop	r14
 f8e:	ff 90       	pop	r15
 f90:	0f 91       	pop	r16
 f92:	1f 91       	pop	r17
 f94:	cf 91       	pop	r28
 f96:	df 91       	pop	r29
 f98:	08 95       	ret

00000f9a <_exit>:
 f9a:	f8 94       	cli

00000f9c <__stop_program>:
 f9c:	ff cf       	rjmp	.-2      	; 0xf9c <__stop_program>
